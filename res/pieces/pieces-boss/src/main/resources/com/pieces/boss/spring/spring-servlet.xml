<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd 
				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan base-package="com.pieces.boss.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<mvc:annotation-driven />

	<!--<mvc:interceptors>-->
		<!--&lt;!&ndash; 配置Token拦截器，防止用户重复提交数据 &ndash;&gt;-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="/**"/>-->
			<!--<bean class="com.pieces.boss.controller.interceptors.SameUrlDataInterceptor"/>-->
		<!--</mvc:interceptor>-->
	<!--</mvc:interceptors>-->

	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<bean class="com.pieces.service.interceptor.SecurityTokenInterceptor"></bean>
		</mvc:interceptor>
		<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>

	<!-- 导致重复代理 -->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">-->
		<!--<property name="proxyTargetClass" value="true" />-->
	<!--</bean>-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!--Spring3.1开始的注解 HandlerMapping ,支持 product consume annotation-->  
	<bean   class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>   
	<!--Spring3.1开始的注解 HandlerAdapter -->  
	<bean   class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>   
	
	<!-- 设置freeMarker的配置文件路径 -->  
	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="location" value="classpath:com/pieces/boss/properties/freemarker.properties" />
	</bean>
	
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />




	<!-- 配置freeMarker的模板路径 -->
	<bean id="freemarkerConfig" class="com.pieces.service.utils.ShiroTagFreeMarkerConfigurer">
	    <property name="templateLoaderPaths">
	        <list>
				<value>/public</value>
			</list>
	    </property>
	    <property name="freemarkerVariables">
	        <map>
	            <entry key="xml_escape" value-ref="fmXmlEscape" />
				<entry key="baseUrl" value="${boss.base.url}"/>
			</map>
	    </property>
	    <property name="freemarkerSettings">
	        <props>
				<prop key="template_update_delay">0</prop>
	            <prop key="classic_compatible">true</prop>
	            <prop key="number_format">#.####</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="auto_import">/common/pager.ftl as p</prop>
	        </props>
	    </property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.GsonHttpMessageConverter">
					<property name="gson">
						<!-- 获取方法返回值：调用valueGenerator的getValue方法 -->
						<bean
								class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
							<property name="targetClass" value="com.pieces.dao.utils.GsonFactory"/>
							<property name="targetMethod" value="getInstance"/>
						</bean>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	 <!-- 配置多视图协商解析器 ,ppa策略,先找parameter，再找header，最后找accept-->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="defaultViews">
            <list>
            	  <!-- JSON View -->
                  <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
                  <!-- JAXB XML View -->
		          <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
		            <constructor-arg>
		                <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		                   <property name="packagesToScan">
		                    <list>
		                       <value>com.pieces.service.vo</value>
		                    </list>
		                   </property>
		                </bean>
		            </constructor-arg>
		          </bean>
            </list>
        </property>
    </bean>



    <!-- 配置freeMarker视图解析器 , 如果多视图协商解析器没有匹配用这个-->  
	<bean id="viewResolver"
	    class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="order" value="2" />
	    <property name="viewClass"
	        value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
	    <property name="contentType" value="text/html; charset=utf-8" />
	    <property name="cache" value="true" />
	    <property name="prefix" value="" />
	    <property name="suffix" value=".ftl" />
	    <property name="exposeSpringMacroHelpers" value="true"></property>
	    <property name="exposeRequestAttributes" value="true"></property>
	</bean>


	<!-- 配置 文件上传的支持 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="maxUploadSize" value="102400000"/>
		<property name="resolveLazily" value="true"/>
		<property name="maxInMemorySize" value="4096"/>
	</bean>


	<!-- css,js路径 -->
	<mvc:resources mapping="/css/**" location="/assets/css/">
		<mvc:resource-chain resource-cache="false">
			<mvc:resolvers>
				<mvc:version-resolver>
					<mvc:content-version-strategy patterns="/**"/>
				</mvc:version-resolver>
			</mvc:resolvers>
		</mvc:resource-chain>
	</mvc:resources>
	<mvc:resources mapping="/js/**" location="/assets/js/">
		<mvc:resource-chain resource-cache="false">
			<mvc:resolvers>
				<mvc:version-resolver>
					<mvc:content-version-strategy patterns="/**"/>
				</mvc:version-resolver>
			</mvc:resolvers>
		</mvc:resource-chain>
	</mvc:resources>
	<mvc:resources mapping="/images/**" location="/assets/images/" />
	<mvc:resources mapping="/fonts/**" location="/assets/fonts/" />
	<mvc:resources mapping="/robots.txt" location="/assets/robots.txt" />

	<aop:config proxy-target-class="false" />

	<bean id="logAspect" class="com.pieces.tools.log.aop.LogAspect"></bean>
	<aop:config>
		<aop:pointcut id="asp" expression="execution(* com.pieces.boss.controller.*.*(..))"/>

		<aop:aspect id="b" ref="logAspect"><!--调用日志类-->
			<aop:around method="doAroundMethodCall" pointcut-ref="asp" />
		</aop:aspect>

	</aop:config>

</beans>
