<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pieces.dao.ArticleCategoryDao">
    <resultMap id="ArticleCategoryResultMap" type="com.pieces.dao.model.ArticleCategory">
            <id column="id"  property="id" />
            <result column="name"  property="name" />
            <result column="status"  property="status" />
            <result column="sort"  property="sort" />
            <result column="model"  property="model" />
            <result column="create_user"  property="createUser" />
            <result column="create_time"  property="createTime" />
            <result column="icon"  property="icon" />
        
    </resultMap>

    <resultMap id="ArticleCategoryVoResultMap"
               type="com.pieces.dao.vo.ArticleCategoryVo" extends="ArticleCategoryResultMap">
        <collection property="articles" ofType="com.pieces.dao.model.Article">
            <id column="article_id"  property="id" />
            <result column="article_title"  property="title" />
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        id,name,status,sort,model,create_user,create_time,icon
    </sql>

    <select id="findById" parameterType="java.lang.Integer" resultMap="ArticleCategoryResultMap">
        select
        <include refid="Base_Column_List" />
        from article_category
        where id = #{id}
    </select>

    <select id="findAll"  resultMap="ArticleCategoryResultMap">
        select
        <include refid="Base_Column_List" />
        from article_category
    </select>

    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from article_category
        where id = #{id}
    </delete>

    <insert id="create" useGeneratedKeys="true" keyProperty="id" parameterType="com.pieces.dao.model.ArticleCategory">
        insert into
        article_category (name,status,sort,model,create_user,create_time,icon)
        values
        (#{name},#{status},#{sort},#{model},#{createUser},#{createTime},#{icon})
    </insert>

    <update id="update" parameterType="com.pieces.dao.model.ArticleCategory">
        update article_category
        <set>
                                                        
            <if test="name != null">
                name = #{name},
            </if>
                                            
            <if test="status != null">
                status = #{status},
            </if>
                                            
            <if test="sort != null">
                sort = #{sort},
            </if>
                                            
            <if test="model != null">
                model = #{model},
            </if>
                                            
            <if test="createUser != null">
                create_user = #{createUser},
            </if>
                                            
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
                                            
            <if test="icon != null">
                icon = #{icon},
            </if>
                            
        </set>
        where id = #{id}
    </update>

    <!-- 根据模块id获取模块下的分类和文章列表 -->
    <select id="findVoByModelId" parameterType="java.lang.Integer" resultMap="ArticleCategoryVoResultMap">
        select
        c.id as id,c.name as name,c.sort as sort,c.model as model, c.icon,
        a.id as article_id, a.title as article_title, a.sort as article_sort
        from article_category c
        left join article a on c.id = a.category_id
        where c.model = #{modelId}
        and c.status = 1
        and a.status = 1
        ORDER BY sort DESC , article_sort DESC
    </select>

    <select id="findByParam" parameterType="com.pieces.dao.model.ArticleCategory"  resultMap="ArticleCategoryResultMap">
        select
        <include refid="Base_Column_List" />
        from article_category
        <where>
            <if test="name != null">
                name like "%"#{name}"%"
            </if>

            <if test="status != null">
                and status = #{status}
            </if>

            <if test="sort != null">
                and sort = #{sort}
            </if>

            <if test="model != null">
                and model = #{model}
            </if>

            <if test="createUser != null">
                and create_user = #{createUser}
            </if>

            <if test="createTime != null">
                and create_time = #{createTime}
            </if>

            <if test="icon != null">
                and icon = #{icon}
            </if>
        </where>
    </select>
</mapper>